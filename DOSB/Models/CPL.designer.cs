#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DOSB.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="DOSB")]
	public partial class CPLDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertEmployees(Employees instance);
    partial void UpdateEmployees(Employees instance);
    partial void DeleteEmployees(Employees instance);
    partial void InsertSegments(Segments instance);
    partial void UpdateSegments(Segments instance);
    partial void DeleteSegments(Segments instance);
    partial void InsertTorqueLogs(TorqueLogs instance);
    partial void UpdateTorqueLogs(TorqueLogs instance);
    partial void DeleteTorqueLogs(TorqueLogs instance);
    partial void InsertWorkshopAssignments(WorkshopAssignments instance);
    partial void UpdateWorkshopAssignments(WorkshopAssignments instance);
    partial void DeleteWorkshopAssignments(WorkshopAssignments instance);
    partial void InsertWorkshopDailyActivities(WorkshopDailyActivities instance);
    partial void UpdateWorkshopDailyActivities(WorkshopDailyActivities instance);
    partial void DeleteWorkshopDailyActivities(WorkshopDailyActivities instance);
    partial void InsertPressureTestLogs(PressureTestLogs instance);
    partial void UpdatePressureTestLogs(PressureTestLogs instance);
    partial void DeletePressureTestLogs(PressureTestLogs instance);
    partial void InsertAttachments(Attachments instance);
    partial void UpdateAttachments(Attachments instance);
    partial void DeleteAttachments(Attachments instance);
    #endregion
		
		public CPLDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["DOSBConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public CPLDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CPLDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CPLDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CPLDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Employees> Employees
		{
			get
			{
				return this.GetTable<Employees>();
			}
		}
		
		public System.Data.Linq.Table<Segments> Segments
		{
			get
			{
				return this.GetTable<Segments>();
			}
		}
		
		public System.Data.Linq.Table<TorqueLogs> TorqueLogs
		{
			get
			{
				return this.GetTable<TorqueLogs>();
			}
		}
		
		public System.Data.Linq.Table<WorkshopAssignments> WorkshopAssignments
		{
			get
			{
				return this.GetTable<WorkshopAssignments>();
			}
		}
		
		public System.Data.Linq.Table<WorkshopDailyActivities> WorkshopDailyActivities
		{
			get
			{
				return this.GetTable<WorkshopDailyActivities>();
			}
		}
		
		public System.Data.Linq.Table<PressureTestLogs> PressureTestLogs
		{
			get
			{
				return this.GetTable<PressureTestLogs>();
			}
		}
		
		public System.Data.Linq.Table<Attachments> Attachments
		{
			get
			{
				return this.GetTable<Attachments>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Employee")]
	public partial class Employees : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EmployeeId;
		
		private string _LDAP;
		
		private string _Status;
		
		private System.Nullable<int> _SegmentId;
		
		private System.Data.Linq.Binary _Avatar;
		
		private string _GivenName;
		
		private string _SurName;
		
		private string _Mobile;
		
		private string _PersonalMobile;
		
		private string _AramcoID;
		
		private System.Nullable<System.DateTime> _AramcoIdExpDate;
		
		private System.Nullable<System.DateTime> _H2SExpDate;
		
		private System.Nullable<System.DateTime> _HUETExpDate;
		
		private string _GIN;
		
		private EntitySet<TorqueLogs> _Torques;
		
		private EntitySet<WorkshopAssignments> _WorkshopAssignments;
		
		private EntitySet<PressureTestLogs> _PressureTests;
		
		private EntitySet<PressureTestLogs> _PressureTests1;
		
		private EntityRef<Segments> _Segment;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEmployeeIdChanging(int value);
    partial void OnEmployeeIdChanged();
    partial void OnLDAPChanging(string value);
    partial void OnLDAPChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    partial void OnSegmentIdChanging(System.Nullable<int> value);
    partial void OnSegmentIdChanged();
    partial void OnAvatarChanging(System.Data.Linq.Binary value);
    partial void OnAvatarChanged();
    partial void OnGivenNameChanging(string value);
    partial void OnGivenNameChanged();
    partial void OnSurNameChanging(string value);
    partial void OnSurNameChanged();
    partial void OnMobileChanging(string value);
    partial void OnMobileChanged();
    partial void OnPersonalMobileChanging(string value);
    partial void OnPersonalMobileChanged();
    partial void OnAramcoIDChanging(string value);
    partial void OnAramcoIDChanged();
    partial void OnAramcoIdExpDateChanging(System.Nullable<System.DateTime> value);
    partial void OnAramcoIdExpDateChanged();
    partial void OnH2SExpDateChanging(System.Nullable<System.DateTime> value);
    partial void OnH2SExpDateChanged();
    partial void OnHUETExpDateChanging(System.Nullable<System.DateTime> value);
    partial void OnHUETExpDateChanged();
    partial void OnGINChanging(string value);
    partial void OnGINChanged();
    #endregion
		
		public Employees()
		{
			this._Torques = new EntitySet<TorqueLogs>(new Action<TorqueLogs>(this.attach_Torques), new Action<TorqueLogs>(this.detach_Torques));
			this._WorkshopAssignments = new EntitySet<WorkshopAssignments>(new Action<WorkshopAssignments>(this.attach_WorkshopAssignments), new Action<WorkshopAssignments>(this.detach_WorkshopAssignments));
			this._PressureTests = new EntitySet<PressureTestLogs>(new Action<PressureTestLogs>(this.attach_PressureTests), new Action<PressureTestLogs>(this.detach_PressureTests));
			this._PressureTests1 = new EntitySet<PressureTestLogs>(new Action<PressureTestLogs>(this.attach_PressureTests1), new Action<PressureTestLogs>(this.detach_PressureTests1));
			this._Segment = default(EntityRef<Segments>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int EmployeeId
		{
			get
			{
				return this._EmployeeId;
			}
			set
			{
				if ((this._EmployeeId != value))
				{
					this.OnEmployeeIdChanging(value);
					this.SendPropertyChanging();
					this._EmployeeId = value;
					this.SendPropertyChanged("EmployeeId");
					this.OnEmployeeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LDAP", DbType="NVarChar(50)")]
		public string LDAP
		{
			get
			{
				return this._LDAP;
			}
			set
			{
				if ((this._LDAP != value))
				{
					this.OnLDAPChanging(value);
					this.SendPropertyChanging();
					this._LDAP = value;
					this.SendPropertyChanged("LDAP");
					this.OnLDAPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="NVarChar(50)")]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SegmentId", DbType="Int")]
		public System.Nullable<int> SegmentId
		{
			get
			{
				return this._SegmentId;
			}
			set
			{
				if ((this._SegmentId != value))
				{
					if (this._Segment.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSegmentIdChanging(value);
					this.SendPropertyChanging();
					this._SegmentId = value;
					this.SendPropertyChanged("SegmentId");
					this.OnSegmentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Avatar", DbType="Image", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Avatar
		{
			get
			{
				return this._Avatar;
			}
			set
			{
				if ((this._Avatar != value))
				{
					this.OnAvatarChanging(value);
					this.SendPropertyChanging();
					this._Avatar = value;
					this.SendPropertyChanged("Avatar");
					this.OnAvatarChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GivenName", DbType="NVarChar(50)")]
		public string GivenName
		{
			get
			{
				return this._GivenName;
			}
			set
			{
				if ((this._GivenName != value))
				{
					this.OnGivenNameChanging(value);
					this.SendPropertyChanging();
					this._GivenName = value;
					this.SendPropertyChanged("GivenName");
					this.OnGivenNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SurName", DbType="NVarChar(50)")]
		public string SurName
		{
			get
			{
				return this._SurName;
			}
			set
			{
				if ((this._SurName != value))
				{
					this.OnSurNameChanging(value);
					this.SendPropertyChanging();
					this._SurName = value;
					this.SendPropertyChanged("SurName");
					this.OnSurNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Mobile", DbType="NVarChar(150)")]
		public string Mobile
		{
			get
			{
				return this._Mobile;
			}
			set
			{
				if ((this._Mobile != value))
				{
					this.OnMobileChanging(value);
					this.SendPropertyChanging();
					this._Mobile = value;
					this.SendPropertyChanged("Mobile");
					this.OnMobileChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersonalMobile", DbType="NVarChar(150)")]
		public string PersonalMobile
		{
			get
			{
				return this._PersonalMobile;
			}
			set
			{
				if ((this._PersonalMobile != value))
				{
					this.OnPersonalMobileChanging(value);
					this.SendPropertyChanging();
					this._PersonalMobile = value;
					this.SendPropertyChanged("PersonalMobile");
					this.OnPersonalMobileChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AramcoID", DbType="NVarChar(15)")]
		public string AramcoID
		{
			get
			{
				return this._AramcoID;
			}
			set
			{
				if ((this._AramcoID != value))
				{
					this.OnAramcoIDChanging(value);
					this.SendPropertyChanging();
					this._AramcoID = value;
					this.SendPropertyChanged("AramcoID");
					this.OnAramcoIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AramcoIdExpDate", DbType="Date")]
		public System.Nullable<System.DateTime> AramcoIdExpDate
		{
			get
			{
				return this._AramcoIdExpDate;
			}
			set
			{
				if ((this._AramcoIdExpDate != value))
				{
					this.OnAramcoIdExpDateChanging(value);
					this.SendPropertyChanging();
					this._AramcoIdExpDate = value;
					this.SendPropertyChanged("AramcoIdExpDate");
					this.OnAramcoIdExpDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_H2SExpDate", DbType="Date")]
		public System.Nullable<System.DateTime> H2SExpDate
		{
			get
			{
				return this._H2SExpDate;
			}
			set
			{
				if ((this._H2SExpDate != value))
				{
					this.OnH2SExpDateChanging(value);
					this.SendPropertyChanging();
					this._H2SExpDate = value;
					this.SendPropertyChanged("H2SExpDate");
					this.OnH2SExpDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HUETExpDate", DbType="Date")]
		public System.Nullable<System.DateTime> HUETExpDate
		{
			get
			{
				return this._HUETExpDate;
			}
			set
			{
				if ((this._HUETExpDate != value))
				{
					this.OnHUETExpDateChanging(value);
					this.SendPropertyChanging();
					this._HUETExpDate = value;
					this.SendPropertyChanged("HUETExpDate");
					this.OnHUETExpDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GIN", DbType="NVarChar(50)")]
		public string GIN
		{
			get
			{
				return this._GIN;
			}
			set
			{
				if ((this._GIN != value))
				{
					this.OnGINChanging(value);
					this.SendPropertyChanging();
					this._GIN = value;
					this.SendPropertyChanged("GIN");
					this.OnGINChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employees_TorqueLogs", Storage="_Torques", ThisKey="EmployeeId", OtherKey="TorqueBy")]
		public EntitySet<TorqueLogs> TorqueLogs
		{
			get
			{
				return this._Torques;
			}
			set
			{
				this._Torques.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employees_WorkshopAssignments", Storage="_WorkshopAssignments", ThisKey="EmployeeId", OtherKey="EmployeeId")]
		public EntitySet<WorkshopAssignments> WorkshopAssignments
		{
			get
			{
				return this._WorkshopAssignments;
			}
			set
			{
				this._WorkshopAssignments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employees_PressureTestLogs", Storage="_PressureTests", ThisKey="EmployeeId", OtherKey="ApprovedBy")]
		public EntitySet<PressureTestLogs> PressureTests
		{
			get
			{
				return this._PressureTests;
			}
			set
			{
				this._PressureTests.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employees_PressureTestLogs1", Storage="_PressureTests1", ThisKey="EmployeeId", OtherKey="TestBy")]
		public EntitySet<PressureTestLogs> PressureTestLogs
		{
			get
			{
				return this._PressureTests1;
			}
			set
			{
				this._PressureTests1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Segments_Employees", Storage="_Segment", ThisKey="SegmentId", OtherKey="SegmentId", IsForeignKey=true)]
		public Segments Segments
		{
			get
			{
				return this._Segment.Entity;
			}
			set
			{
				Segments previousValue = this._Segment.Entity;
				if (((previousValue != value) 
							|| (this._Segment.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Segment.Entity = null;
						previousValue.Employees.Remove(this);
					}
					this._Segment.Entity = value;
					if ((value != null))
					{
						value.Employees.Add(this);
						this._SegmentId = value.SegmentId;
					}
					else
					{
						this._SegmentId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Segments");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Torques(TorqueLogs entity)
		{
			this.SendPropertyChanging();
			entity.Employees = this;
		}
		
		private void detach_Torques(TorqueLogs entity)
		{
			this.SendPropertyChanging();
			entity.Employees = null;
		}
		
		private void attach_WorkshopAssignments(WorkshopAssignments entity)
		{
			this.SendPropertyChanging();
			entity.Employees = this;
		}
		
		private void detach_WorkshopAssignments(WorkshopAssignments entity)
		{
			this.SendPropertyChanging();
			entity.Employees = null;
		}
		
		private void attach_PressureTests(PressureTestLogs entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_PressureTests(PressureTestLogs entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
		
		private void attach_PressureTests1(PressureTestLogs entity)
		{
			this.SendPropertyChanging();
			entity.Employees = this;
		}
		
		private void detach_PressureTests1(PressureTestLogs entity)
		{
			this.SendPropertyChanging();
			entity.Employees = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Segment")]
	public partial class Segments : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SegmentId;
		
		private string _Name;
		
		private string _FullName;
		
		private int _ParentId;
		
		private string _BusinessCategory;
		
		private EntitySet<Employees> _Employees;
		
		private EntitySet<Segments> _Segments;
		
		private EntityRef<Segments> _Segment1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSegmentIdChanging(int value);
    partial void OnSegmentIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnFullNameChanging(string value);
    partial void OnFullNameChanged();
    partial void OnParentIdChanging(int value);
    partial void OnParentIdChanged();
    partial void OnBusinessCategoryChanging(string value);
    partial void OnBusinessCategoryChanged();
    #endregion
		
		public Segments()
		{
			this._Employees = new EntitySet<Employees>(new Action<Employees>(this.attach_Employees), new Action<Employees>(this.detach_Employees));
			this._Segments = new EntitySet<Segments>(new Action<Segments>(this.attach_Segments), new Action<Segments>(this.detach_Segments));
			this._Segment1 = default(EntityRef<Segments>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SegmentId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SegmentId
		{
			get
			{
				return this._SegmentId;
			}
			set
			{
				if ((this._SegmentId != value))
				{
					this.OnSegmentIdChanging(value);
					this.SendPropertyChanging();
					this._SegmentId = value;
					this.SendPropertyChanged("SegmentId");
					this.OnSegmentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FullName", DbType="NVarChar(50)")]
		public string FullName
		{
			get
			{
				return this._FullName;
			}
			set
			{
				if ((this._FullName != value))
				{
					this.OnFullNameChanging(value);
					this.SendPropertyChanging();
					this._FullName = value;
					this.SendPropertyChanged("FullName");
					this.OnFullNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentId", DbType="Int NOT NULL")]
		public int ParentId
		{
			get
			{
				return this._ParentId;
			}
			set
			{
				if ((this._ParentId != value))
				{
					if (this._Segment1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParentIdChanging(value);
					this.SendPropertyChanging();
					this._ParentId = value;
					this.SendPropertyChanged("ParentId");
					this.OnParentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BusinessCategory", DbType="NVarChar(50)")]
		public string BusinessCategory
		{
			get
			{
				return this._BusinessCategory;
			}
			set
			{
				if ((this._BusinessCategory != value))
				{
					this.OnBusinessCategoryChanging(value);
					this.SendPropertyChanging();
					this._BusinessCategory = value;
					this.SendPropertyChanged("BusinessCategory");
					this.OnBusinessCategoryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Segments_Employees", Storage="_Employees", ThisKey="SegmentId", OtherKey="SegmentId")]
		public EntitySet<Employees> Employees
		{
			get
			{
				return this._Employees;
			}
			set
			{
				this._Employees.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Segments_Segments", Storage="_Segments", ThisKey="SegmentId", OtherKey="ParentId")]
		public EntitySet<Segments> Segments1
		{
			get
			{
				return this._Segments;
			}
			set
			{
				this._Segments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Segments_Segments", Storage="_Segment1", ThisKey="ParentId", OtherKey="SegmentId", IsForeignKey=true)]
		public Segments Segment1
		{
			get
			{
				return this._Segment1.Entity;
			}
			set
			{
				Segments previousValue = this._Segment1.Entity;
				if (((previousValue != value) 
							|| (this._Segment1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Segment1.Entity = null;
						previousValue.Segments1.Remove(this);
					}
					this._Segment1.Entity = value;
					if ((value != null))
					{
						value.Segments1.Add(this);
						this._ParentId = value.SegmentId;
					}
					else
					{
						this._ParentId = default(int);
					}
					this.SendPropertyChanged("Segment1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Employees(Employees entity)
		{
			this.SendPropertyChanging();
			entity.Segments = this;
		}
		
		private void detach_Employees(Employees entity)
		{
			this.SendPropertyChanging();
			entity.Segments = null;
		}
		
		private void attach_Segments(Segments entity)
		{
			this.SendPropertyChanging();
			entity.Segment1 = this;
		}
		
		private void detach_Segments(Segments entity)
		{
			this.SendPropertyChanging();
			entity.Segment1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Torque")]
	public partial class TorqueLogs : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TorqueId;
		
		private string _PartNumber;
		
		private string _SerialNumber;
		
		private string _Memo;
		
		private System.Nullable<System.DateTime> _StartAt;
		
		private System.Nullable<System.DateTime> _FinishAt;
		
		private System.Nullable<int> _TorqueBy;
		
		private System.Nullable<int> _Defect;
		
		private EntityRef<Employees> _Employee;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTorqueIdChanging(int value);
    partial void OnTorqueIdChanged();
    partial void OnPartNumberChanging(string value);
    partial void OnPartNumberChanged();
    partial void OnSerialNumberChanging(string value);
    partial void OnSerialNumberChanged();
    partial void OnMemoChanging(string value);
    partial void OnMemoChanged();
    partial void OnStartAtChanging(System.Nullable<System.DateTime> value);
    partial void OnStartAtChanged();
    partial void OnFinishAtChanging(System.Nullable<System.DateTime> value);
    partial void OnFinishAtChanged();
    partial void OnTorqueByChanging(System.Nullable<int> value);
    partial void OnTorqueByChanged();
    partial void OnDefectChanging(System.Nullable<int> value);
    partial void OnDefectChanged();
    #endregion
		
		public TorqueLogs()
		{
			this._Employee = default(EntityRef<Employees>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TorqueId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int TorqueId
		{
			get
			{
				return this._TorqueId;
			}
			set
			{
				if ((this._TorqueId != value))
				{
					this.OnTorqueIdChanging(value);
					this.SendPropertyChanging();
					this._TorqueId = value;
					this.SendPropertyChanged("TorqueId");
					this.OnTorqueIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PartNumber", DbType="NVarChar(50)")]
		public string PartNumber
		{
			get
			{
				return this._PartNumber;
			}
			set
			{
				if ((this._PartNumber != value))
				{
					this.OnPartNumberChanging(value);
					this.SendPropertyChanging();
					this._PartNumber = value;
					this.SendPropertyChanged("PartNumber");
					this.OnPartNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SerialNumber", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string SerialNumber
		{
			get
			{
				return this._SerialNumber;
			}
			set
			{
				if ((this._SerialNumber != value))
				{
					this.OnSerialNumberChanging(value);
					this.SendPropertyChanging();
					this._SerialNumber = value;
					this.SendPropertyChanged("SerialNumber");
					this.OnSerialNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Memo", DbType="NVarChar(250)")]
		public string Memo
		{
			get
			{
				return this._Memo;
			}
			set
			{
				if ((this._Memo != value))
				{
					this.OnMemoChanging(value);
					this.SendPropertyChanging();
					this._Memo = value;
					this.SendPropertyChanged("Memo");
					this.OnMemoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartAt", DbType="DateTime")]
		public System.Nullable<System.DateTime> StartAt
		{
			get
			{
				return this._StartAt;
			}
			set
			{
				if ((this._StartAt != value))
				{
					this.OnStartAtChanging(value);
					this.SendPropertyChanging();
					this._StartAt = value;
					this.SendPropertyChanged("StartAt");
					this.OnStartAtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FinishAt", DbType="DateTime")]
		public System.Nullable<System.DateTime> FinishAt
		{
			get
			{
				return this._FinishAt;
			}
			set
			{
				if ((this._FinishAt != value))
				{
					this.OnFinishAtChanging(value);
					this.SendPropertyChanging();
					this._FinishAt = value;
					this.SendPropertyChanged("FinishAt");
					this.OnFinishAtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TorqueBy", DbType="Int")]
		public System.Nullable<int> TorqueBy
		{
			get
			{
				return this._TorqueBy;
			}
			set
			{
				if ((this._TorqueBy != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTorqueByChanging(value);
					this.SendPropertyChanging();
					this._TorqueBy = value;
					this.SendPropertyChanged("TorqueBy");
					this.OnTorqueByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Defect", DbType="Int")]
		public System.Nullable<int> Defect
		{
			get
			{
				return this._Defect;
			}
			set
			{
				if ((this._Defect != value))
				{
					this.OnDefectChanging(value);
					this.SendPropertyChanging();
					this._Defect = value;
					this.SendPropertyChanged("Defect");
					this.OnDefectChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employees_TorqueLogs", Storage="_Employee", ThisKey="TorqueBy", OtherKey="EmployeeId", IsForeignKey=true)]
		public Employees Employees
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employees previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.TorqueLogs.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.TorqueLogs.Add(this);
						this._TorqueBy = value.EmployeeId;
					}
					else
					{
						this._TorqueBy = default(Nullable<int>);
					}
					this.SendPropertyChanged("Employees");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.WorkshopAssignment")]
	public partial class WorkshopAssignments : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _WorkshopAssignmentId;
		
		private int _EmployeeId;
		
		private int _WorkshopDailyActivityId;
		
		private System.DateTime _AssignedAt;
		
		private System.Nullable<System.DateTime> _EndedAt;
		
		private EntityRef<Employees> _Employee;
		
		private EntityRef<WorkshopDailyActivities> _WorkshopDailyActivity;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnWorkshopAssignmentIdChanging(int value);
    partial void OnWorkshopAssignmentIdChanged();
    partial void OnEmployeeIdChanging(int value);
    partial void OnEmployeeIdChanged();
    partial void OnWorkshopDailyActivityIdChanging(int value);
    partial void OnWorkshopDailyActivityIdChanged();
    partial void OnAssignedAtChanging(System.DateTime value);
    partial void OnAssignedAtChanged();
    partial void OnEndedAtChanging(System.Nullable<System.DateTime> value);
    partial void OnEndedAtChanged();
    #endregion
		
		public WorkshopAssignments()
		{
			this._Employee = default(EntityRef<Employees>);
			this._WorkshopDailyActivity = default(EntityRef<WorkshopDailyActivities>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WorkshopAssignmentId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int WorkshopAssignmentId
		{
			get
			{
				return this._WorkshopAssignmentId;
			}
			set
			{
				if ((this._WorkshopAssignmentId != value))
				{
					this.OnWorkshopAssignmentIdChanging(value);
					this.SendPropertyChanging();
					this._WorkshopAssignmentId = value;
					this.SendPropertyChanged("WorkshopAssignmentId");
					this.OnWorkshopAssignmentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int EmployeeId
		{
			get
			{
				return this._EmployeeId;
			}
			set
			{
				if ((this._EmployeeId != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmployeeIdChanging(value);
					this.SendPropertyChanging();
					this._EmployeeId = value;
					this.SendPropertyChanged("EmployeeId");
					this.OnEmployeeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WorkshopDailyActivityId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int WorkshopDailyActivityId
		{
			get
			{
				return this._WorkshopDailyActivityId;
			}
			set
			{
				if ((this._WorkshopDailyActivityId != value))
				{
					if (this._WorkshopDailyActivity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnWorkshopDailyActivityIdChanging(value);
					this.SendPropertyChanging();
					this._WorkshopDailyActivityId = value;
					this.SendPropertyChanged("WorkshopDailyActivityId");
					this.OnWorkshopDailyActivityIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssignedAt", DbType="DateTime NOT NULL")]
		public System.DateTime AssignedAt
		{
			get
			{
				return this._AssignedAt;
			}
			set
			{
				if ((this._AssignedAt != value))
				{
					this.OnAssignedAtChanging(value);
					this.SendPropertyChanging();
					this._AssignedAt = value;
					this.SendPropertyChanged("AssignedAt");
					this.OnAssignedAtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndedAt", DbType="DateTime")]
		public System.Nullable<System.DateTime> EndedAt
		{
			get
			{
				return this._EndedAt;
			}
			set
			{
				if ((this._EndedAt != value))
				{
					this.OnEndedAtChanging(value);
					this.SendPropertyChanging();
					this._EndedAt = value;
					this.SendPropertyChanged("EndedAt");
					this.OnEndedAtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employees_WorkshopAssignments", Storage="_Employee", ThisKey="EmployeeId", OtherKey="EmployeeId", IsForeignKey=true)]
		public Employees Employees
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employees previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.WorkshopAssignments.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.WorkshopAssignments.Add(this);
						this._EmployeeId = value.EmployeeId;
					}
					else
					{
						this._EmployeeId = default(int);
					}
					this.SendPropertyChanged("Employees");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WorkshopDailyActivities_WorkshopAssignments", Storage="_WorkshopDailyActivity", ThisKey="WorkshopDailyActivityId", OtherKey="ActivityId", IsForeignKey=true)]
		public WorkshopDailyActivities WorkshopDailyActivities
		{
			get
			{
				return this._WorkshopDailyActivity.Entity;
			}
			set
			{
				WorkshopDailyActivities previousValue = this._WorkshopDailyActivity.Entity;
				if (((previousValue != value) 
							|| (this._WorkshopDailyActivity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._WorkshopDailyActivity.Entity = null;
						previousValue.WorkshopAssignments.Remove(this);
					}
					this._WorkshopDailyActivity.Entity = value;
					if ((value != null))
					{
						value.WorkshopAssignments.Add(this);
						this._WorkshopDailyActivityId = value.ActivityId;
					}
					else
					{
						this._WorkshopDailyActivityId = default(int);
					}
					this.SendPropertyChanged("WorkshopDailyActivities");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.WorkshopDailyActivity")]
	public partial class WorkshopDailyActivities : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ActivityId;
		
		private string _Description;
		
		private int _Forklift;
		
		private int _Torque;
		
		private int _PressureTest;
		
		private System.DateTime _CreatedAt;
		
		private System.Nullable<System.DateTime> _FinishedAt;
		
		private System.Nullable<System.DateTime> _CanceledAt;
		
		private EntitySet<WorkshopAssignments> _WorkshopAssignments;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnActivityIdChanging(int value);
    partial void OnActivityIdChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnForkliftChanging(int value);
    partial void OnForkliftChanged();
    partial void OnTorqueChanging(int value);
    partial void OnTorqueChanged();
    partial void OnPressureTestChanging(int value);
    partial void OnPressureTestChanged();
    partial void OnCreatedAtChanging(System.DateTime value);
    partial void OnCreatedAtChanged();
    partial void OnFinishedAtChanging(System.Nullable<System.DateTime> value);
    partial void OnFinishedAtChanged();
    partial void OnCanceledAtChanging(System.Nullable<System.DateTime> value);
    partial void OnCanceledAtChanged();
    #endregion
		
		public WorkshopDailyActivities()
		{
			this._WorkshopAssignments = new EntitySet<WorkshopAssignments>(new Action<WorkshopAssignments>(this.attach_WorkshopAssignments), new Action<WorkshopAssignments>(this.detach_WorkshopAssignments));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActivityId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ActivityId
		{
			get
			{
				return this._ActivityId;
			}
			set
			{
				if ((this._ActivityId != value))
				{
					this.OnActivityIdChanging(value);
					this.SendPropertyChanging();
					this._ActivityId = value;
					this.SendPropertyChanged("ActivityId");
					this.OnActivityIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Forklift", DbType="Int NOT NULL")]
		public int Forklift
		{
			get
			{
				return this._Forklift;
			}
			set
			{
				if ((this._Forklift != value))
				{
					this.OnForkliftChanging(value);
					this.SendPropertyChanging();
					this._Forklift = value;
					this.SendPropertyChanged("Forklift");
					this.OnForkliftChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Torque", DbType="Int NOT NULL")]
		public int Torque
		{
			get
			{
				return this._Torque;
			}
			set
			{
				if ((this._Torque != value))
				{
					this.OnTorqueChanging(value);
					this.SendPropertyChanging();
					this._Torque = value;
					this.SendPropertyChanged("Torque");
					this.OnTorqueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PressureTest", DbType="Int NOT NULL")]
		public int PressureTest
		{
			get
			{
				return this._PressureTest;
			}
			set
			{
				if ((this._PressureTest != value))
				{
					this.OnPressureTestChanging(value);
					this.SendPropertyChanging();
					this._PressureTest = value;
					this.SendPropertyChanged("PressureTest");
					this.OnPressureTestChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedAt", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedAt
		{
			get
			{
				return this._CreatedAt;
			}
			set
			{
				if ((this._CreatedAt != value))
				{
					this.OnCreatedAtChanging(value);
					this.SendPropertyChanging();
					this._CreatedAt = value;
					this.SendPropertyChanged("CreatedAt");
					this.OnCreatedAtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FinishedAt", DbType="DateTime")]
		public System.Nullable<System.DateTime> FinishedAt
		{
			get
			{
				return this._FinishedAt;
			}
			set
			{
				if ((this._FinishedAt != value))
				{
					this.OnFinishedAtChanging(value);
					this.SendPropertyChanging();
					this._FinishedAt = value;
					this.SendPropertyChanged("FinishedAt");
					this.OnFinishedAtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CanceledAt", DbType="DateTime")]
		public System.Nullable<System.DateTime> CanceledAt
		{
			get
			{
				return this._CanceledAt;
			}
			set
			{
				if ((this._CanceledAt != value))
				{
					this.OnCanceledAtChanging(value);
					this.SendPropertyChanging();
					this._CanceledAt = value;
					this.SendPropertyChanged("CanceledAt");
					this.OnCanceledAtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WorkshopDailyActivities_WorkshopAssignments", Storage="_WorkshopAssignments", ThisKey="ActivityId", OtherKey="WorkshopDailyActivityId")]
		public EntitySet<WorkshopAssignments> WorkshopAssignments
		{
			get
			{
				return this._WorkshopAssignments;
			}
			set
			{
				this._WorkshopAssignments.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_WorkshopAssignments(WorkshopAssignments entity)
		{
			this.SendPropertyChanging();
			entity.WorkshopDailyActivities = this;
		}
		
		private void detach_WorkshopAssignments(WorkshopAssignments entity)
		{
			this.SendPropertyChanging();
			entity.WorkshopDailyActivities = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PressureTest")]
	public partial class PressureTestLogs : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PressureTestId;
		
		private string _PartNumber;
		
		private string _SerialNumber;
		
		private string _Comment;
		
		private string _AssemblyType;
		
		private System.Nullable<System.DateTime> _StartAt;
		
		private System.Nullable<System.DateTime> _FinishAt;
		
		private System.Nullable<int> _TestBy;
		
		private System.Nullable<int> _ApprovedBy;
		
		private System.Nullable<int> _Defect;
		
		private EntityRef<Employees> _Employee;
		
		private EntityRef<Employees> _Employee1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPressureTestIdChanging(int value);
    partial void OnPressureTestIdChanged();
    partial void OnPartNumberChanging(string value);
    partial void OnPartNumberChanged();
    partial void OnSerialNumberChanging(string value);
    partial void OnSerialNumberChanged();
    partial void OnCommentChanging(string value);
    partial void OnCommentChanged();
    partial void OnAssemblyTypeChanging(string value);
    partial void OnAssemblyTypeChanged();
    partial void OnStartAtChanging(System.Nullable<System.DateTime> value);
    partial void OnStartAtChanged();
    partial void OnFinishAtChanging(System.Nullable<System.DateTime> value);
    partial void OnFinishAtChanged();
    partial void OnTestByChanging(System.Nullable<int> value);
    partial void OnTestByChanged();
    partial void OnApprovedByChanging(System.Nullable<int> value);
    partial void OnApprovedByChanged();
    partial void OnDefectChanging(System.Nullable<int> value);
    partial void OnDefectChanged();
    #endregion
		
		public PressureTestLogs()
		{
			this._Employee = default(EntityRef<Employees>);
			this._Employee1 = default(EntityRef<Employees>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PressureTestId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PressureTestId
		{
			get
			{
				return this._PressureTestId;
			}
			set
			{
				if ((this._PressureTestId != value))
				{
					this.OnPressureTestIdChanging(value);
					this.SendPropertyChanging();
					this._PressureTestId = value;
					this.SendPropertyChanged("PressureTestId");
					this.OnPressureTestIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PartNumber", DbType="NVarChar(50)")]
		public string PartNumber
		{
			get
			{
				return this._PartNumber;
			}
			set
			{
				if ((this._PartNumber != value))
				{
					this.OnPartNumberChanging(value);
					this.SendPropertyChanging();
					this._PartNumber = value;
					this.SendPropertyChanged("PartNumber");
					this.OnPartNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SerialNumber", DbType="NVarChar(50)")]
		public string SerialNumber
		{
			get
			{
				return this._SerialNumber;
			}
			set
			{
				if ((this._SerialNumber != value))
				{
					this.OnSerialNumberChanging(value);
					this.SendPropertyChanging();
					this._SerialNumber = value;
					this.SendPropertyChanged("SerialNumber");
					this.OnSerialNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comment", DbType="NVarChar(250)")]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged("Comment");
					this.OnCommentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssemblyType", DbType="NVarChar(250)")]
		public string AssemblyType
		{
			get
			{
				return this._AssemblyType;
			}
			set
			{
				if ((this._AssemblyType != value))
				{
					this.OnAssemblyTypeChanging(value);
					this.SendPropertyChanging();
					this._AssemblyType = value;
					this.SendPropertyChanged("AssemblyType");
					this.OnAssemblyTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartAt", DbType="DateTime")]
		public System.Nullable<System.DateTime> StartAt
		{
			get
			{
				return this._StartAt;
			}
			set
			{
				if ((this._StartAt != value))
				{
					this.OnStartAtChanging(value);
					this.SendPropertyChanging();
					this._StartAt = value;
					this.SendPropertyChanged("StartAt");
					this.OnStartAtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FinishAt", DbType="DateTime")]
		public System.Nullable<System.DateTime> FinishAt
		{
			get
			{
				return this._FinishAt;
			}
			set
			{
				if ((this._FinishAt != value))
				{
					this.OnFinishAtChanging(value);
					this.SendPropertyChanging();
					this._FinishAt = value;
					this.SendPropertyChanged("FinishAt");
					this.OnFinishAtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TestBy", DbType="Int")]
		public System.Nullable<int> TestBy
		{
			get
			{
				return this._TestBy;
			}
			set
			{
				if ((this._TestBy != value))
				{
					if (this._Employee1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTestByChanging(value);
					this.SendPropertyChanging();
					this._TestBy = value;
					this.SendPropertyChanged("TestBy");
					this.OnTestByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApprovedBy", DbType="Int")]
		public System.Nullable<int> ApprovedBy
		{
			get
			{
				return this._ApprovedBy;
			}
			set
			{
				if ((this._ApprovedBy != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnApprovedByChanging(value);
					this.SendPropertyChanging();
					this._ApprovedBy = value;
					this.SendPropertyChanged("ApprovedBy");
					this.OnApprovedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Defect", DbType="Int")]
		public System.Nullable<int> Defect
		{
			get
			{
				return this._Defect;
			}
			set
			{
				if ((this._Defect != value))
				{
					this.OnDefectChanging(value);
					this.SendPropertyChanging();
					this._Defect = value;
					this.SendPropertyChanged("Defect");
					this.OnDefectChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employees_PressureTestLogs", Storage="_Employee", ThisKey="ApprovedBy", OtherKey="EmployeeId", IsForeignKey=true)]
		public Employees Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employees previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.PressureTests.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.PressureTests.Add(this);
						this._ApprovedBy = value.EmployeeId;
					}
					else
					{
						this._ApprovedBy = default(Nullable<int>);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employees_PressureTestLogs1", Storage="_Employee1", ThisKey="TestBy", OtherKey="EmployeeId", IsForeignKey=true)]
		public Employees Employees
		{
			get
			{
				return this._Employee1.Entity;
			}
			set
			{
				Employees previousValue = this._Employee1.Entity;
				if (((previousValue != value) 
							|| (this._Employee1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee1.Entity = null;
						previousValue.PressureTestLogs.Remove(this);
					}
					this._Employee1.Entity = value;
					if ((value != null))
					{
						value.PressureTestLogs.Add(this);
						this._TestBy = value.EmployeeId;
					}
					else
					{
						this._TestBy = default(Nullable<int>);
					}
					this.SendPropertyChanged("Employees");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Attachment")]
	public partial class Attachments : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AttachmentId;
		
		private string _AttachableType;
		
		private System.Nullable<int> _AttachableId;
		
		private string _Path;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAttachmentIdChanging(int value);
    partial void OnAttachmentIdChanged();
    partial void OnAttachableTypeChanging(string value);
    partial void OnAttachableTypeChanged();
    partial void OnAttachableIdChanging(System.Nullable<int> value);
    partial void OnAttachableIdChanged();
    partial void OnPathChanging(string value);
    partial void OnPathChanged();
    #endregion
		
		public Attachments()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AttachmentId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int AttachmentId
		{
			get
			{
				return this._AttachmentId;
			}
			set
			{
				if ((this._AttachmentId != value))
				{
					this.OnAttachmentIdChanging(value);
					this.SendPropertyChanging();
					this._AttachmentId = value;
					this.SendPropertyChanged("AttachmentId");
					this.OnAttachmentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AttachableType", DbType="NVarChar(250)")]
		public string AttachableType
		{
			get
			{
				return this._AttachableType;
			}
			set
			{
				if ((this._AttachableType != value))
				{
					this.OnAttachableTypeChanging(value);
					this.SendPropertyChanging();
					this._AttachableType = value;
					this.SendPropertyChanged("AttachableType");
					this.OnAttachableTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AttachableId", DbType="Int")]
		public System.Nullable<int> AttachableId
		{
			get
			{
				return this._AttachableId;
			}
			set
			{
				if ((this._AttachableId != value))
				{
					this.OnAttachableIdChanging(value);
					this.SendPropertyChanging();
					this._AttachableId = value;
					this.SendPropertyChanged("AttachableId");
					this.OnAttachableIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Path", DbType="NVarChar(MAX)")]
		public string Path
		{
			get
			{
				return this._Path;
			}
			set
			{
				if ((this._Path != value))
				{
					this.OnPathChanging(value);
					this.SendPropertyChanging();
					this._Path = value;
					this.SendPropertyChanged("Path");
					this.OnPathChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
